/**
 * Created by irodrig on 9/8/2018.
 */
var LSWallgroup_default = function () {
	this.tabContainerTpl = LSTemplates.wallgroup_default.tabs, this.wallContainerTpl = LSTemplates.wallgroup_default.tab
};
LSWallgroup_default.prototype.init = function (l, t) {
	this.walls = {}, this.tabs = {}, this.id = l, this.options = t
}, LSWallgroup_default.prototype.parseJSON = function (l) {
	if (this.wallgroup = l, l.walls.length) {
		for (var t = 0; t < l.walls.length; t++)this.tabs[l.walls[t].wall_id] = {
			title: l.walls[t].title,
			id: l.walls[t].wall_id
		}, this.walls[l.walls[t].wall_id] = l.walls[t];
		this.loadThemeAssets(), this.addCssClasses(), this.initContainers(), this.initTabs()
	}
}, LSWallgroup_default.prototype.loadThemeAssets = function () {
	this.parent_theme = LSHelpers.getDefaultTheme(this.wallgroup.theme), LSHelpers.appendCss(LSConfig.assetURL + "/css/" + this.wallgroup.theme + ".css"), LSHelpers.injectCss(LSConfig.assetURL + "/css/" + this.wallgroup.style + ".css", "fpls-" + this.id.replace("ls-", "")), this.wallgroup.customcss && LSHelpers.injectInlineCss(this.wallgroup.customcss, "fpls-" + this.id.replace("ls-", "")), LSHelpers.injectFonts(LSConfig.assetURL + "/css/" + this.wallgroup.theme + "-fonts.css", "fpls-" + this.id.replace("ls-", ""), this.wallgroup.font_body, this.wallgroup.font_heading)
}, LSWallgroup_default.prototype.addCssClasses = function () {
	this.mainContainer = $ls("#" + this.id), this.mainContainer.addClass("fpls-" + this.wallgroup.theme), this.mainContainer.addClass("fpls-" + this.id.replace("ls-", "")), this.parent_theme && this.mainContainer.addClass("fpls-" + this.parent_theme)
}, LSWallgroup_default.prototype.initContainers = function () {
	for (var l in this.walls)this.walls[l].wallContainer = $ls("<div></div>").appendTo(this.mainContainer)
}, LSWallgroup_default.prototype.initTabs = function () {
	var l = this;
	if (Object.keys(this.tabs).length > 1) {
		this.tabContainer = $ls(this.tabContainerTpl({tabs: this.tabs})), this.tabContainer.prependTo(this.mainContainer);
		var t = this.tabContainer.find("a");
		t.on("click", function (a) {
			a.preventDefault(), t.removeClass("current"), $ls(this).addClass("current"), l.switchTab($ls(this).data("target"))
		});
		var a = LSHelpers.parseQuerystring(l.getLsw());
		a ? t.each(function () {
			$ls(this).text() == a && $ls(this).trigger("click")
		}) : t.eq(0).trigger("click")
	} else l.switchTab(this.tabs[Object.keys(this.tabs)[0]].id)
}, LSWallgroup_default.prototype.switchTab = function (l) {
	var t = this;
	l && (this.walls[l].htmlLoaded ? (this.showTab(this.walls[l]), this.walls[l].wallInstance.refresh(), this.walls[l].wallInstance.sendAnalytics()) : (this.walls[l].wallContainer.append($ls(this.wallContainerTpl(this.walls[l]))), this.walls[l].htmlLoaded = !0, this.loadWall(this.walls[l], function (l) {
		t.showTab(l)
	})))
}, LSWallgroup_default.prototype.showTab = function (l) {
	for (var t in this.walls)this.walls[t].wallContainer && this.walls[t].wallContainer.hide();
	l.wallContainer.show()
}, LSWallgroup_default.prototype.loadWall = function (l, t) {
	var a = this, s = LSHelpers.getDefaultTheme(l.theme);
	s ? LSHelpers.appendJs(LSConfig.assetURL + "/js/" + s + ".js", function () {
		LSHelpers.appendJs(LSConfig.assetURL + "/js/" + l.theme + ".js", function () {
			setTimeout(function () {
				a.initWall(l, t)
			}, 100)
		})
	}) : LSHelpers.appendJs(LSConfig.assetURL + "/js/" + l.theme + ".js", function () {
		setTimeout(function () {
			a.initWall(l, t)
		}, 100)
	})
}, LSWallgroup_default.prototype.pushTab = function (l) {
	var t = LSHelpers.replaceQuerystring(window.location.href, this.getLsw(), l);
	window.history.pushState({}, document.title + " | " + l, t)
}, LSWallgroup_default.prototype.getLsw = function () {
	return this.lsw || (LSData.wgCount++, this.lsw = "lsw" + LSData.wgCount), this.lsw
}, LSWallgroup_default.prototype.initWall = function (wall, callback) {
	var self = this, wallContainer = wall.wallContainer.find(".fpls-wallgroup-content");
	wallContainer.addClass("fpls-" + wall.theme);
	var parent_theme = LSHelpers.getDefaultTheme(wall.theme);
	parent_theme && wallContainer.addClass("fpls-" + parent_theme);
	var className = wall.theme.replace(/-/g, "_").replace("wall_", "LSWall_");
	wall.wallInstance = eval("new " + className + "()"), wall.wallInstance.wallgroup = this.wallgroup, wall.wallInstance.init(wallContainer, this.options, wall, self.mainContainer), callback && callback(wall), self.addCredits()
}, LSWallgroup_default.prototype.addCredits = function () {
	$ls("#" + this.id).find(".fpls-credits").length < 1 && $ls("#" + this.id).append('<address class="fpls-credits fpls-credits-wall"><a href="https://www.livestory.nyc" target="_blank" class="fpls-credits-logo">Live by Live Story</a></address>')
}, this.LSTemplates = this.LSTemplates || {}, this.LSTemplates.wallgroup_default = this.LSTemplates.wallgroup_default || {}, this.LSTemplates.wallgroup_default.tab = LSHandlebars.template({
	compiler: [7, ">= 4.0.0"],
	main: function (l, t, a, s, e) {
		return '<div class="fpls-wallgroup-wrapper">\n    <div class="fpls-wallgroup-content">\n        <div class="fpls-loading"></div>\n    </div>\n</div>'
	},
	useData: !0
}), this.LSTemplates.wallgroup_default.tabs = LSHandlebars.template({
	1: function (l, t, a, s, e) {
		var i = l.lambda, n = l.escapeExpression;
		return '    <li class="fpls-wallgroup-tab"><a data-target="' + n(i(null != t ? t.id : t, t)) + '">' + n(i(null != t ? t.title : t, t)) + "</a></li>\n"
	}, compiler: [7, ">= 4.0.0"], main: function (l, t, a, s, e) {
		var i;
		return '<ul class="fpls-wallgroup-tabs">\n' + (null != (i = a.each.call(null != t ? t : {}, null != t ? t.tabs : t, {
				name: "each",
				hash: {},
				fn: l.program(1, e, 0),
				inverse: l.noop,
				data: e
			})) ? i : "") + "</ul>\n"
	}, useData: !0
});
